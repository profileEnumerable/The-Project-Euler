using System;
using System.Diagnostics;
using System.Reflection;

/// <summary>
//Each new term in the Fibonacci sequence is generated by adding the previous two terms.
//By starting with 1 and 2, the first 10 terms will be:
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
/// </summary>

namespace The_Project_Euler
{
    public delegate int FibonacciEvenSum();

    internal class Program
    {
        public static int GetFibonacciNum(int index)
        {
            switch (index)
            {
                case 0:
                case 1:
                    return 0;
                case 2:
                    return 1;
                default:
                    return GetFibonacciNum(index - 2) + GetFibonacciNum(index - 1);
            }
        }

        public static int GetSumEvenNum_UseCycle()
        {
            int firstDigit = 0, secondDigit = 1;
            var sum = 0;

            while (firstDigit < 4000000)
            {
                if (firstDigit % 2 == 0)
                {
                    sum += firstDigit;
                }

                secondDigit += firstDigit;
                firstDigit = secondDigit - firstDigit;
            }

            return sum;
        }

        public static int GetSumEvenNum_UseRecursive()
        {
            int fibonacciNum, sum = 0;

            for (var i = 1; (fibonacciNum = GetFibonacciNum(i)) < 4000000; i++)
            {
                if (fibonacciNum % 2 == 0)
                    sum += fibonacciNum;
            }
            return sum;
        }

        public static int GetSumEvenNum_UseRegularity()
        {
            int firstEvenNum = 2, secondEvenNum = 8;
            var sum = 0;

            while (firstEvenNum < 4000000)
            {
                sum += firstEvenNum;

                var temp = secondEvenNum;
                secondEvenNum *= 4;
                secondEvenNum += firstEvenNum;
                firstEvenNum = temp;
            }
            return sum;
        }

        public static void ShowFunctionResult(params FibonacciEvenSum[] sums)
        {
            var stopwatch = new Stopwatch();

            foreach (var fibonacciEvenSum in sums)
            {
                stopwatch.Start();
                Console.Write($"{fibonacciEvenSum.GetMethodInfo().Name,-30}: Sum: {fibonacciEvenSum()} ");
                stopwatch.Stop();
                Console.WriteLine($"Elapsed ticks {stopwatch.ElapsedTicks}");
                stopwatch.Reset();
            }
        }

        private static void Main()
        {
            ShowFunctionResult(GetSumEvenNum_UseRecursive, GetSumEvenNum_UseCycle, GetSumEvenNum_UseRegularity);
        }
    }
}
